name: Docker Publish on Push

on:
  push:
    branches:
      - main

env:
  IMAGE_ID: ghcr.io/kodansha/bedrock
  LATEST_VERSION: php8.0

jobs:
  # Check if GitHub Action workflow has been changed
  check-workflow-change:
    runs-on: ubuntu-latest

    outputs:
      changed: ${{ steps.check.outputs.changed }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check if workflow is changed
        id: check
        run: echo "::set-output name=changed::$(git diff --name-only HEAD HEAD~ | grep '^.github/workflows/docker-publish-on-push.yml$' | xargs)"

  # Get only changed Dockerfiles
  changed-docker-files:
    runs-on: ubuntu-latest

    outputs:
      files: ${{ steps.changes.outputs.files }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get changed Dockerfiles
        id: changes
        run: echo "::set-output name=files::$(git diff --name-only HEAD HEAD~ | grep '^php.*/Dockerfile' | xargs)"

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest

    needs:
      - check-workflow-change
      - changed-docker-files

    if: ${{ needs.check-workflow-change.outputs.changed }} || {{ needs.changed-docker-files.outputs.files }}

    steps:
      - uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker images
        run: |
          if [ -n "${{ needs.check-workflow-change.outputs.changed }}" ] ; then
            echo Build and push all versions of Docker images
            dockerfiles=$(find . -maxdepth 2 -type f -name Dockerfile | sed 's|^./||' | xargs)
          else
            echo Build and push only changed versions of Docker images
            dockerfiles="${{ needs.changed-docker-files.outputs.files }}"
          fi

          for dockerfile in $dockerfiles ; do
            version=$(dirname $dockerfile)
            echo Building Docker image $version...
            echo Docker tag is: $IMAGE_ID:$version

            if [ $version = $LATEST_VERSION ] ; then
              docker build . --file $dockerfile --tag $IMAGE_ID:$version --tag $IMAGE_ID:latest
              docker push $IMAGE_ID:$version
              docker push $IMAGE_ID:latest
            else
              docker build . --file $dockerfile --tag $IMAGE_ID:$version
              docker push $IMAGE_ID:$version
            fi
          done
